---
import type * as interfaces from '../../lib/interfaces.ts'
import {
  getAllPosts,
  getPostBySlug,
  getBlock,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client.ts'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers.ts'
import Layout from '../../layouts/Layout.astro'
import PostTags from '../../components/PostTags.astro'
import PostFeaturedImage from '../../components/PostFeaturedImage.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostHeadline from '../../components/BlogPostHeadline.astro'
import styles from '../../styles/blog.module.css'
import PostDates from '../../components/PostDates.astro'
import Upvote from '../../components/Upvote.astro'
import type { Block } from '../../lib/interfaces.ts'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({ params: { slug: post.Slug } }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error(`Post not found. slug: ${slug}`)
}

const [blocks, allPosts] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile?.File?.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const imageOrFile = block.Image || block.File
      if (!imageOrFile || !imageOrFile.File || !imageOrFile.File.ExpiryTime) {
        return Promise.resolve(block)
      }
      const expiryTime = imageOrFile.File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          const fileUrl = (block.Image || block.File)?.File?.Url;
          if (!fileUrl) {
            throw new Error("File URL is undefined");
          }
          url = new URL(fileUrl);
        } catch {
          console.log('Invalid file URL: ', (block.Image || block.File)?.File?.Url);
          return Promise.reject();
        }
        return Promise.resolve(url)
      })
    )
    .map((promise) => promise.then(downloadFile))
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage?.Url) {
  ogImage = new URL(filePath(new URL(post.FeaturedImage.Url)), Astro.site).toString()
}
// 見出しがない場合は表示しない
const headings = blocks.filter((b: Block) =>
    ['heading_1', 'heading_2', 'heading_3'].includes(b.Type)
  )
const showTableOfContents = headings.length > 0;
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  path={getPostLink(post.Slug)}
  ogImage={ogImage}
>
  <div slot="main" class={styles.main}>
    <PostFeaturedImage post={post} />
    <div class="post-title">
      <PostTitle post={post} enableLink={false} />
      <PostDates post={post} />
      <PostTags post={post} enableLink={true} />
    </div>
    <div class={styles.post}>  
      <div class={`${showTableOfContents ? 'post-wrapper' : ''}`}>
        {showTableOfContents ? <BlogPostHeadline heading="目次" blocks={blocks} isAside={false} /> : null }
        <div>
          <PostBody blocks={blocks} />
        </div>
      </div>
      
      <footer>
        <Upvote slug={slug} />
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </div>
    <footer style="padding: 0;" />
  </div>

  <!-- <div slot="aside" class="aside">
    <BlogPostsLink
      heading="Posts in the same category"
      posts={postsHavingSameTag.filter(
        (p: interfaces.Post) => p.Slug !== post.Slug
      )}
    />
    <BlogPostsLink heading="Recommended" posts={rankedPosts} />
    <BlogPostsLink heading="Latest posts" posts={recentPosts} />
    <BlogTagsLink heading="Categories" tags={tags} />
  </div> -->
</Layout>

<style>
  .post-wrapper {
    display: grid;
    grid-template-columns: 27% 73%;
    gap: 38px;
  }
  .post-title {
    padding: 0 20px 40px
  }
  @media (max-width: 768px) {
    .post-wrapper {
      display: block;
    }
    .post-title {
      padding: 0 20px 20px
    }
  }
</style>