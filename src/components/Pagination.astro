---
import { getPageLink } from '../lib/blog-helpers.ts'

export interface Props {
  currentPage: number
  numberOfPages: number
  tag: string
}

const { currentPage, numberOfPages } = Astro.props

// ページが複数ある場合のみページネーションを表示
const showPagination = numberOfPages > 1

const isFirstPage = currentPage === 1
const isLastPage = currentPage === numberOfPages

const startPage = currentPage - 2 < 1 ? 1 : currentPage - 2
const endPage =
  currentPage + 2 > numberOfPages ? numberOfPages : currentPage + 2

const pages = []
for (let i = startPage; i <= endPage; i++) {
  pages.push(i)
}
---

{showPagination && (
  <div class="pagination">
    <a
      href={getPageLink(1)}
      class={isFirstPage ? 'inactive' : undefined}
      aria-disabled={!!isFirstPage}
    >
      &lt;&lt;
    </a>
    {
      pages.map((p: number) => (
        <a
          href={getPageLink(p)}
          class={p === currentPage ? 'inactive' : undefined}
          aria-disabled={p === currentPage}
        >
          {p}
        </a>
    ))
    }
    <a
      href={getPageLink(numberOfPages)}
      class={isLastPage ? 'inactive' : undefined}
      aria-disabled={!!isLastPage}
    >
      &gt;&gt;
    </a>
  </div>
)}

<style>
  .pagination {
    display: flex;
    width: 100%;
    margin: 0 auto;
    color: var(--fg);
    justify-content: center;
    align-items: center;
  }
  .pagination a {
    display: block;
    width: 2.4rem;
    height: 3rem;
    margin: 0 0.4rem;
    border-radius: var(--radius);
    border: 1px solid #ccc;
    /* background: #f4f4f4; */
    color: inherit;
    font-size: 0.85rem;
    text-align: center;
    text-decoration: underline;
    font-weight: 500;
    line-height: 3rem;
  }
  .pagination a:hover:not(.inactive) {
    background: #f4f4f4;
  }
  .pagination a.inactive {
    color: #999;
    text-decoration: none;
    pointer-events: none;
    cursor: default;
  }
</style>
